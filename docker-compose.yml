version: '3.8'

services:
  db:
    image: 'postgres:latest'
    container_name: codexlibris-db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: codexlibris
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    command: ["postgres", "-c", "listen_addresses=*"]
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d codexlibris"]
      interval: 10s
      retries: 5
      start_period: 10s

  api_rest:
    build:
      context: ./API/CodexLibrisAPI
      dockerfile: Dockerfile
    container_name: api_container
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8080"
    networks:
      - mynetwork
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/codexlibris
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379

  nginx:
    image: nginx:latest
    container_name: reverse-proxy
    restart: always
    ports:
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
    depends_on:
      - api_rest
    networks:
      - mynetwork

  redis:
    image: redis:latest
    container_name: codexlibris-redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  ollama_models:

networks:
  mynetwork:
    driver: bridge
